[
  {
    "objectID": "reference/predict.html",
    "href": "reference/predict.html",
    "title": "predict",
    "section": "",
    "text": "predict\n\n\n\n\n\nName\nDescription\n\n\n\n\npredict_aj_estimates\nPredict state-occupancy probabilities at fixed_time_horizons.\n\n\n\n\n\npredict.predict_aj_estimates(event_table, fixed_time_horizons)\nPredict state-occupancy probabilities at fixed_time_horizons.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevent_table\npl.DataFrame\nThe event table created by :func:prepare_event_table.\nrequired\n\n\nfixed_time_horizons\npl.Series\nTimes at which to obtain the state-occupancy probabilities.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nDataFrame with fixed_time_horizons and the estimated probabilities for states 0, 1 and 2.",
    "crumbs": [
      "Reference",
      "Some functions",
      "predict"
    ]
  },
  {
    "objectID": "reference/predict.html#functions",
    "href": "reference/predict.html#functions",
    "title": "predict",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\npredict_aj_estimates\nPredict state-occupancy probabilities at fixed_time_horizons.\n\n\n\n\n\npredict.predict_aj_estimates(event_table, fixed_time_horizons)\nPredict state-occupancy probabilities at fixed_time_horizons.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevent_table\npl.DataFrame\nThe event table created by :func:prepare_event_table.\nrequired\n\n\nfixed_time_horizons\npl.Series\nTimes at which to obtain the state-occupancy probabilities.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nDataFrame with fixed_time_horizons and the estimated probabilities for states 0, 1 and 2.",
    "crumbs": [
      "Reference",
      "Some functions",
      "predict"
    ]
  },
  {
    "objectID": "reference/aj.html",
    "href": "reference/aj.html",
    "title": "aj",
    "section": "",
    "text": "aj\n\n\n\n\n\nName\nDescription\n\n\n\n\nprepare_event_table\nGenerate the full event table from raw times and reals data.\n\n\n\n\n\naj.prepare_event_table(times_and_reals)\nGenerate the full event table from raw times and reals data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntimes_and_reals\npl.DataFrame\nA Polars DataFrame containing at least times and reals columns.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe event table with all intermediate columns computed.",
    "crumbs": [
      "Reference",
      "Some functions",
      "aj"
    ]
  },
  {
    "objectID": "reference/aj.html#functions",
    "href": "reference/aj.html#functions",
    "title": "aj",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nprepare_event_table\nGenerate the full event table from raw times and reals data.\n\n\n\n\n\naj.prepare_event_table(times_and_reals)\nGenerate the full event table from raw times and reals data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntimes_and_reals\npl.DataFrame\nA Polars DataFrame containing at least times and reals columns.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe event table with all intermediate columns computed.",
    "crumbs": [
      "Reference",
      "Some functions",
      "aj"
    ]
  },
  {
    "objectID": "get_started.html",
    "href": "get_started.html",
    "title": "Get started with polarstate",
    "section": "",
    "text": "This is a reproducible example that shows how to use polarstate, and compare the outputs to {lifelines} package.\nFirst: Import polars as a dependency:\n\nimport polars as pl\n\n\nCompeting Risks Example\n\npolarstate (Py 🐍)lifelines (Py 🐍)tidycmprsk (R 🔵)\n\n\n\nfrom polarstate import prepare_event_table\n\ntimes_and_reals = pl.DataFrame({\n    \"times\": [1, 2, 2, 3, 4, 5, 6],\n    \"reals\": [1, 0, 2, 1, 0, 2, 1]\n})\n\nevent_table = prepare_event_table(times_and_reals)\n\nprint(event_table)\n\nshape: (6, 15)\n┌───────┬─────────┬─────────┬─────────┬───┬──────────────┬─────────────┬─────────────┬─────────────┐\n│ times ┆ count_0 ┆ count_1 ┆ count_2 ┆ … ┆ trainsition_ ┆ trainsition ┆ state_occup ┆ state_occup │\n│ ---   ┆ ---     ┆ ---     ┆ ---     ┆   ┆ probabilitie ┆ _probabilit ┆ ancy_probab ┆ ancy_probab │\n│ i64   ┆ i64     ┆ i64     ┆ i64     ┆   ┆ s_to_1…      ┆ ies_to_2…   ┆ ility_1_…   ┆ ility_2_…   │\n│       ┆         ┆         ┆         ┆   ┆ ---          ┆ ---         ┆ ---         ┆ ---         │\n│       ┆         ┆         ┆         ┆   ┆ f64          ┆ f64         ┆ f64         ┆ f64         │\n╞═══════╪═════════╪═════════╪═════════╪═══╪══════════════╪═════════════╪═════════════╪═════════════╡\n│ 1     ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.142857     ┆ 0.0         ┆ 0.142857    ┆ 0.0         │\n│ 2     ┆ 1       ┆ 0       ┆ 1       ┆ … ┆ 0.0          ┆ 0.142857    ┆ 0.142857    ┆ 0.142857    │\n│ 3     ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.178571     ┆ 0.0         ┆ 0.321429    ┆ 0.142857    │\n│ 4     ┆ 1       ┆ 0       ┆ 0       ┆ … ┆ 0.0          ┆ 0.0         ┆ 0.321429    ┆ 0.142857    │\n│ 5     ┆ 0       ┆ 0       ┆ 1       ┆ … ┆ 0.0          ┆ 0.267857    ┆ 0.321429    ┆ 0.410714    │\n│ 6     ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.267857     ┆ 0.0         ┆ 0.589286    ┆ 0.410714    │\n└───────┴─────────┴─────────┴─────────┴───┴──────────────┴─────────────┴─────────────┴─────────────┘\n\n\n\nPrediction for Specific Time-Horizons\n\nfrom polarstate import predict_aj_estimates\n\npredict_aj_estimates(event_table, pl.Series([1, 3, 5]))\n\n\nshape: (3, 5)\n\n\n\ntimes\nstate_occupancy_probability_0\nstate_occupancy_probability_1\nstate_occupancy_probability_2\nestimate_origin\n\n\ni64\nf64\nf64\nf64\nenum\n\n\n\n\n1\n0.857143\n0.142857\n0.0\n\"fixed_time_horizons\"\n\n\n3\n0.535714\n0.321429\n0.142857\n\"fixed_time_horizons\"\n\n\n5\n0.267857\n0.321429\n0.410714\n\"fixed_time_horizons\"\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nfrom lifelines import AalenJohansenFitter\n\ndf = pd.DataFrame({\n    \"duration\": [1, 2, 2, 3, 4, 5, 6],\n    \"event\":    [1, 0, 2, 1, 0, 2, 1]\n})\n\najf_priamry = AalenJohansenFitter()\najf_priamry.fit(df[\"duration\"], df[\"event\"], event_of_interest=1)\n\nprint(\"Event Table for event type 1\")\nprint(ajf_priamry.cumulative_density_)\n\najf_competing = AalenJohansenFitter()\najf_competing.fit(df[\"duration\"], df[\"event\"], event_of_interest=2)\n\nprint(\"Event Table for event type 2\")\nprint(ajf_competing.cumulative_density_)\n\nEvent Table for event type 1\n             CIF_1\nevent_at          \n0.0       0.000000\n1.0       0.142857\n2.0       0.142857\n3.0       0.321429\n4.0       0.321429\n5.0       0.321429\n6.0       0.589286\nEvent Table for event type 2\n             CIF_2\nevent_at          \n0.0       0.000000\n1.0       0.000000\n2.0       0.142857\n3.0       0.142857\n4.0       0.142857\n5.0       0.410714\n6.0       0.410714\n\n\n\nPrediction for Specific Time-Horizons\n\nprint(\"Cumulative incidence for event type 1 at times 1, 3, 5:\")\nprint(ajf_priamry.predict([1, 3, 5]))\n\nprint(\"Cumulative incidence for event type 2 at times 1, 3, 5:\")\nprint(ajf_competing.predict([1, 3, 5]))\n\nCumulative incidence for event type 1 at times 1, 3, 5:\n1    0.142857\n3    0.321429\n5    0.321429\nName: CIF_1, dtype: float64\nCumulative incidence for event type 2 at times 1, 3, 5:\n1    0.000000\n3    0.142857\n5    0.410714\nName: CIF_2, dtype: float64\n\n\n\n\n\nlibrary(tidycmprsk)\ncuminc(Surv(ttdeath, death_cr) ~ 1, trial)\n\ntimes_and_reals &lt;- data.frame(\n  times = c(1, 2, 2, 3, 4, 5, 6),\n  reals = factor(c(1, 0, 2, 1, 0, 2, 1),\n                 levels = c(0, 1, 2),\n                 labels = c(\"censored\", \"primary_event\", \"competing_event\"))\n)\n\n(cuminc(Surv(times, reals) ~ 1, times_and_reals)) |&gt;\n    tidy() |&gt;\n    print()\n\n\n\n\n\n\nNo Compating Risks Example\n\npolarstate (Py 🐍)lifelines (Py 🐍)\n\n\n\nfrom lifelines import AalenJohansenFitter\nfrom lifelines.datasets import load_waltons\nfrom polarstate import prepare_event_table\n\n\nT, E = load_waltons()['T'], load_waltons()['E']\n\ntimes_and_reals = pl.DataFrame({\n        \"times\": T,\n        \"reals\": E\n    })\n\nresult = prepare_event_table(times_and_reals)\n\nprint(result)\n\nshape: (32, 15)\n┌───────┬─────────┬─────────┬─────────┬───┬──────────────┬─────────────┬─────────────┬─────────────┐\n│ times ┆ count_0 ┆ count_1 ┆ count_2 ┆ … ┆ trainsition_ ┆ trainsition ┆ state_occup ┆ state_occup │\n│ ---   ┆ ---     ┆ ---     ┆ ---     ┆   ┆ probabilitie ┆ _probabilit ┆ ancy_probab ┆ ancy_probab │\n│ f64   ┆ i64     ┆ i64     ┆ i64     ┆   ┆ s_to_1…      ┆ ies_to_2…   ┆ ility_1_…   ┆ ility_2_…   │\n│       ┆         ┆         ┆         ┆   ┆ ---          ┆ ---         ┆ ---         ┆ ---         │\n│       ┆         ┆         ┆         ┆   ┆ f64          ┆ f64         ┆ f64         ┆ f64         │\n╞═══════╪═════════╪═════════╪═════════╪═══╪══════════════╪═════════════╪═════════════╪═════════════╡\n│ 6.0   ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.006135     ┆ 0.0         ┆ 0.006135    ┆ 0.0         │\n│ 7.0   ┆ 1       ┆ 1       ┆ 0       ┆ … ┆ 0.006135     ┆ 0.0         ┆ 0.01227     ┆ 0.0         │\n│ 9.0   ┆ 0       ┆ 3       ┆ 0       ┆ … ┆ 0.01852      ┆ 0.0         ┆ 0.03079     ┆ 0.0         │\n│ 13.0  ┆ 0       ┆ 3       ┆ 0       ┆ … ┆ 0.01852      ┆ 0.0         ┆ 0.04931     ┆ 0.0         │\n│ 15.0  ┆ 0       ┆ 2       ┆ 0       ┆ … ┆ 0.012347     ┆ 0.0         ┆ 0.061656    ┆ 0.0         │\n│ …     ┆ …       ┆ …       ┆ …       ┆ … ┆ …            ┆ …           ┆ …           ┆ …           │\n│ 63.0  ┆ 0       ┆ 9       ┆ 0       ┆ … ┆ 0.06023      ┆ 0.0         ┆ 0.81931     ┆ 0.0         │\n│ 66.0  ┆ 0       ┆ 3       ┆ 0       ┆ … ┆ 0.020077     ┆ 0.0         ┆ 0.839386    ┆ 0.0         │\n│ 68.0  ┆ 1       ┆ 9       ┆ 0       ┆ … ┆ 0.06023      ┆ 0.0         ┆ 0.899616    ┆ 0.0         │\n│ 69.0  ┆ 1       ┆ 12      ┆ 0       ┆ … ┆ 0.086043     ┆ 0.0         ┆ 0.985659    ┆ 0.0         │\n│ 75.0  ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.014341     ┆ 0.0         ┆ 1.0         ┆ 0.0         │\n└───────┴─────────┴─────────┴─────────┴───┴──────────────┴─────────────┴─────────────┴─────────────┘\n\n\n\n\n\nfrom lifelines import AalenJohansenFitter\nfrom lifelines.datasets import load_waltons\nT, E = load_waltons()['T'], load_waltons()['E']\najf = AalenJohansenFitter(calculate_variance=True)\najf.fit(T, E, event_of_interest=1)\najf.cumulative_density_\n\n\n\n\n\n\n\n\nCIF_1\n\n\nevent_at\n\n\n\n\n\n0.0\n0.000000\n\n\n6.0\n0.006135\n\n\n7.0\n0.012270\n\n\n9.0\n0.030790\n\n\n13.0\n0.049310\n\n\n15.0\n0.061656\n\n\n17.0\n0.067830\n\n\n19.0\n0.086350\n\n\n22.0\n0.111043\n\n\n26.0\n0.141910\n\n\n29.0\n0.172776\n\n\n32.0\n0.178949\n\n\n33.0\n0.197469\n\n\n36.0\n0.209816\n\n\n38.0\n0.222163\n\n\n41.0\n0.265376\n\n\n43.0\n0.271549\n\n\n45.0\n0.327109\n\n\n47.0\n0.333339\n\n\n48.0\n0.383183\n\n\n51.0\n0.401875\n\n\n53.0\n0.445488\n\n\n54.0\n0.457949\n\n\n56.0\n0.570097\n\n\n58.0\n0.595019\n\n\n60.0\n0.688476\n\n\n61.0\n0.745695\n\n\n62.0\n0.759079\n\n\n63.0\n0.819310\n\n\n66.0\n0.839386\n\n\n68.0\n0.899616\n\n\n69.0\n0.985659\n\n\n75.0\n1.000000"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Introduction to the package.\n\n\n\nFunctions to inspect docstrings.\n\n\n\naj\n\n\n\npredict",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#getting-started",
    "href": "reference/index.html#getting-started",
    "title": "Function reference",
    "section": "",
    "text": "Introduction to the package.",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#some-functions",
    "href": "reference/index.html#some-functions",
    "title": "Function reference",
    "section": "",
    "text": "Functions to inspect docstrings.\n\n\n\naj\n\n\n\npredict",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  }
]