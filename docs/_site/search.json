[
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Introduction to the package.\n\n\n\nFunctions to inspect docstrings.\n\n\n\naj",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#getting-started",
    "href": "reference/index.html#getting-started",
    "title": "Function reference",
    "section": "",
    "text": "Introduction to the package.",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#some-functions",
    "href": "reference/index.html#some-functions",
    "title": "Function reference",
    "section": "",
    "text": "Functions to inspect docstrings.\n\n\n\naj",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "get_started.html",
    "href": "get_started.html",
    "title": "Get started with polarstate",
    "section": "",
    "text": "import polars as pl\nfrom polarstate.aj import aalen_johansen\n\n\nGet starteds with polarstate\n\nlifelinespolarstate\n\n\n\nfrom lifelines import AalenJohansenFitter\nfrom lifelines.datasets import load_waltons\nT, E = load_waltons()['T'], load_waltons()['E']\najf = AalenJohansenFitter(calculate_variance=True)\najf.fit(T, E, event_of_interest=1)\najf.cumulative_density_\n\n\n\n\n\n\n\n\nCIF_1\n\n\nevent_at\n\n\n\n\n\n0.0\n0.000000\n\n\n6.0\n0.006135\n\n\n7.0\n0.012270\n\n\n9.0\n0.030790\n\n\n13.0\n0.049310\n\n\n15.0\n0.061656\n\n\n17.0\n0.067830\n\n\n19.0\n0.086350\n\n\n22.0\n0.111043\n\n\n26.0\n0.141910\n\n\n29.0\n0.172776\n\n\n32.0\n0.178949\n\n\n33.0\n0.197469\n\n\n36.0\n0.209816\n\n\n38.0\n0.222163\n\n\n41.0\n0.265376\n\n\n43.0\n0.271549\n\n\n45.0\n0.327109\n\n\n47.0\n0.333339\n\n\n48.0\n0.383183\n\n\n51.0\n0.401875\n\n\n53.0\n0.445488\n\n\n54.0\n0.457949\n\n\n56.0\n0.570097\n\n\n58.0\n0.595019\n\n\n60.0\n0.688476\n\n\n61.0\n0.745695\n\n\n62.0\n0.759079\n\n\n63.0\n0.819310\n\n\n66.0\n0.839386\n\n\n68.0\n0.899616\n\n\n69.0\n0.985659\n\n\n75.0\n1.000000\n\n\n\n\n\n\n\n\n\n\nfrom lifelines import AalenJohansenFitter\nfrom lifelines.datasets import load_waltons\nfrom polarstate.aj import *\n\n\nT, E = load_waltons()['T'], load_waltons()['E']\n\ntimes_and_reals = pl.DataFrame({\n        \"times\": T,\n        \"reals\": E\n    })\n\nresult = prepare_event_table(times_and_reals)\n\nprint(result)\n\nshape: (32, 15)\n┌───────┬─────────┬─────────┬─────────┬───┬──────────────┬─────────────┬─────────────┬─────────────┐\n│ times ┆ count_0 ┆ count_1 ┆ count_2 ┆ … ┆ trainsition_ ┆ trainsition ┆ state_occup ┆ state_occup │\n│ ---   ┆ ---     ┆ ---     ┆ ---     ┆   ┆ probabilitie ┆ _probabilit ┆ ancy_probab ┆ ancy_probab │\n│ f64   ┆ i64     ┆ i64     ┆ i64     ┆   ┆ s_to_1…      ┆ ies_to_2…   ┆ ility_1_…   ┆ ility_2_…   │\n│       ┆         ┆         ┆         ┆   ┆ ---          ┆ ---         ┆ ---         ┆ ---         │\n│       ┆         ┆         ┆         ┆   ┆ f64          ┆ f64         ┆ f64         ┆ f64         │\n╞═══════╪═════════╪═════════╪═════════╪═══╪══════════════╪═════════════╪═════════════╪═════════════╡\n│ 6.0   ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.006135     ┆ 0.0         ┆ 0.006135    ┆ 0.0         │\n│ 7.0   ┆ 1       ┆ 1       ┆ 0       ┆ … ┆ 0.006135     ┆ 0.0         ┆ 0.01227     ┆ 0.0         │\n│ 9.0   ┆ 0       ┆ 3       ┆ 0       ┆ … ┆ 0.01852      ┆ 0.0         ┆ 0.03079     ┆ 0.0         │\n│ 13.0  ┆ 0       ┆ 3       ┆ 0       ┆ … ┆ 0.01852      ┆ 0.0         ┆ 0.04931     ┆ 0.0         │\n│ 15.0  ┆ 0       ┆ 2       ┆ 0       ┆ … ┆ 0.012347     ┆ 0.0         ┆ 0.061656    ┆ 0.0         │\n│ …     ┆ …       ┆ …       ┆ …       ┆ … ┆ …            ┆ …           ┆ …           ┆ …           │\n│ 63.0  ┆ 0       ┆ 9       ┆ 0       ┆ … ┆ 0.06023      ┆ 0.0         ┆ 0.81931     ┆ 0.0         │\n│ 66.0  ┆ 0       ┆ 3       ┆ 0       ┆ … ┆ 0.020077     ┆ 0.0         ┆ 0.839386    ┆ 0.0         │\n│ 68.0  ┆ 1       ┆ 9       ┆ 0       ┆ … ┆ 0.06023      ┆ 0.0         ┆ 0.899616    ┆ 0.0         │\n│ 69.0  ┆ 1       ┆ 12      ┆ 0       ┆ … ┆ 0.086043     ┆ 0.0         ┆ 0.985659    ┆ 0.0         │\n│ 75.0  ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.014341     ┆ 0.0         ┆ 1.0         ┆ 0.0         │\n└───────┴─────────┴─────────┴─────────┴───┴──────────────┴─────────────┴─────────────┴─────────────┘\n\n\n\n\n\n\n\nCompeting Risks Example\n\npolarstate (Py 🐍)lifelines (Py 🐍)tidycmprsk (R 🔵)\n\n\n\ntimes_and_reals = pl.DataFrame({\n    \"times\": [1, 2, 2, 3, 4, 5, 6],\n    \"reals\": [1, 0, 2, 1, 0, 2, 1]\n})\n\nresult = prepare_event_table(times_and_reals)\n\nprint(result)\n\nshape: (6, 15)\n┌───────┬─────────┬─────────┬─────────┬───┬──────────────┬─────────────┬─────────────┬─────────────┐\n│ times ┆ count_0 ┆ count_1 ┆ count_2 ┆ … ┆ trainsition_ ┆ trainsition ┆ state_occup ┆ state_occup │\n│ ---   ┆ ---     ┆ ---     ┆ ---     ┆   ┆ probabilitie ┆ _probabilit ┆ ancy_probab ┆ ancy_probab │\n│ i64   ┆ i64     ┆ i64     ┆ i64     ┆   ┆ s_to_1…      ┆ ies_to_2…   ┆ ility_1_…   ┆ ility_2_…   │\n│       ┆         ┆         ┆         ┆   ┆ ---          ┆ ---         ┆ ---         ┆ ---         │\n│       ┆         ┆         ┆         ┆   ┆ f64          ┆ f64         ┆ f64         ┆ f64         │\n╞═══════╪═════════╪═════════╪═════════╪═══╪══════════════╪═════════════╪═════════════╪═════════════╡\n│ 1     ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.142857     ┆ 0.0         ┆ 0.142857    ┆ 0.0         │\n│ 2     ┆ 1       ┆ 0       ┆ 1       ┆ … ┆ 0.0          ┆ 0.142857    ┆ 0.142857    ┆ 0.142857    │\n│ 3     ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.178571     ┆ 0.0         ┆ 0.321429    ┆ 0.142857    │\n│ 4     ┆ 1       ┆ 0       ┆ 0       ┆ … ┆ 0.0          ┆ 0.0         ┆ 0.321429    ┆ 0.142857    │\n│ 5     ┆ 0       ┆ 0       ┆ 1       ┆ … ┆ 0.0          ┆ 0.267857    ┆ 0.321429    ┆ 0.410714    │\n│ 6     ┆ 0       ┆ 1       ┆ 0       ┆ … ┆ 0.267857     ┆ 0.0         ┆ 0.589286    ┆ 0.410714    │\n└───────┴─────────┴─────────┴─────────┴───┴──────────────┴─────────────┴─────────────┴─────────────┘\n\n\n\n\n\nfrom lifelines import AalenJohansenFitter\n\nT = times_and_reals[\"times\"].to_numpy()\nE = times_and_reals[\"reals\"].to_numpy()\n\najf = AalenJohansenFitter()\najf.fit(T, E, event_of_interest=1)\nprint(ajf.cumulative_density_)\n\najf.fit(T, E, event_of_interest=2)\nprint(ajf.cumulative_density_)\n\n             CIF_1\nevent_at          \n0.0       0.000000\n1.0       0.142857\n2.0       0.142857\n3.0       0.321429\n4.0       0.321429\n5.0       0.321429\n6.0       0.589286\n             CIF_2\nevent_at          \n0.0       0.000000\n1.0       0.000000\n2.0       0.142857\n3.0       0.142857\n4.0       0.142857\n5.0       0.410714\n6.0       0.410714\n\n\n\n\nlibrary(tidycmprsk)\ncuminc(Surv(ttdeath, death_cr) ~ 1, trial)\n\ntimes_and_reals &lt;- data.frame(\n  times = c(1, 2, 2, 3, 4, 5, 6),\n  reals = factor(c(1, 0, 2, 1, 0, 2, 1),\n                 levels = c(0, 1, 2),\n                 labels = c(\"censored\", \"primary_event\", \"competing_event\"))\n)\n\n(cuminc(Surv(times, reals) ~ 1, times_and_reals)) |&gt;\n    tidy() |&gt;\n    print()"
  },
  {
    "objectID": "reference/aj.html",
    "href": "reference/aj.html",
    "title": "aj",
    "section": "",
    "text": "aj\n\n\n\n\n\nName\nDescription\n\n\n\n\naalen_johansen\nCompute the Aalen-Johansen estimator for cumulative incidence in the presence of competing risks.\n\n\ngroup_reals_by_times\nCount occurrences of each event type (0, 1, 2) per unique observed time.\n\n\nadd_events_at_times_column\n\n\n\nadd_at_risk_column\nAdd a column to the DataFrame that counts the number of individuals at risk at each time point.\n\n\nadd_cause_specific_hazards_columns\nAdd columns for cause-specific hazards and conditional survival at each time point.\n\n\nadd_overall_survival_column\nAdd a column for overall survival, defined as the cumulative product of\n\n\n\n\n\naj.aalen_johansen(times, reals, event_of_interest=1, competing_events=None)\nCompute the Aalen-Johansen estimator for cumulative incidence in the presence of competing risks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntimes\npl.Series\nEvent or censoring times for each observation.\nrequired\n\n\nreals\npl.Series\nEvent type for each observation (0 for censored, event codes otherwise).\nrequired\n\n\nevent_of_interest\nint\nThe event code for the event of interest (default is 1).\n1\n\n\ncompeting_events\nlist of int\nList of event codes considered as competing events. If None, defaults to [2].\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nDataFrame with columns: - ‘time’: unique event times - ‘cuminc’: cumulative incidence estimate at each time\n\n\n\n\n\n\nThis implementation assumes that event codes are integers, with 0 indicating censoring.\n\n\n\n\naj.group_reals_by_times(df)\nCount occurrences of each event type (0, 1, 2) per unique observed time.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\npl.DataFrame\nA Polars DataFrame with at least two columns: - ‘times’ (int): The observed time for each record. - ‘reals’ (int): The event type for each record, where: - 0 indicates censoring, - 1 indicates the primary event, - 2 indicates a competing event.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nA DataFrame with one row per unique time and three additional columns: - ‘count_0’: Number of censored observations at that time. - ‘count_1’: Number of primary events at that time. - ‘count_2’: Number of competing events at that time.\n\n\n\n\n\n\n\nInput is assumed to be clean (i.e., times and reals are properly typed).\nTimes are sorted in ascending order in the output.\nIf a particular event type does not occur at a time, its count will be 0.\n\n\n\n\n\naj.add_events_at_times_column(sorted_times_and_reals)\n\n\n\naj.add_at_risk_column(events_data)\nAdd a column to the DataFrame that counts the number of individuals at risk at each time point.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevents_data\npl.DataFrame\nA DataFrame with columns ‘times’, ‘count_0’, ‘count_1’, and ‘count_2’.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe input DataFrame with an additional column ‘at_risk’ that contains the number of individuals at risk at each time point.\n\n\n\n\n\n\n\naj.add_cause_specific_hazards_columns(events_data)\nAdd columns for cause-specific hazards and conditional survival at each time point.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevents_data\npl.DataFrame\nA DataFrame with columns: - ‘count_0’: number of censored individuals at each time point, - ‘count_1’: number of primary events at each time point, - ‘count_2’: number of competing events at each time point, - ‘at_risk’: number of individuals at risk at each time point.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe input DataFrame with three additional columns: - ‘csh_1’: cause-specific hazard for event type 1 (count_1 / at_risk) - ‘csh_2’: cause-specific hazard for event type 2 (count_2 / at_risk) - ‘conditional_survival’: probability of not having any event at that time (count_0 / at_risk)\n\n\n\n\n\n\n\naj.add_overall_survival_column(events_data)\nAdd a column for overall survival, defined as the cumulative product of the conditional survival probabilities up to and including each time point.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevents_data\npl.DataFrame\nA Polars DataFrame with a column ‘conditional_survival’ representing the probability of surviving past each time point.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe input DataFrame with an additional column ‘overall_survival’, which contains the Kaplan-Meier-style survival probability at each time.",
    "crumbs": [
      "Reference",
      "Some functions",
      "aj"
    ]
  },
  {
    "objectID": "reference/aj.html#functions",
    "href": "reference/aj.html#functions",
    "title": "aj",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\naalen_johansen\nCompute the Aalen-Johansen estimator for cumulative incidence in the presence of competing risks.\n\n\ngroup_reals_by_times\nCount occurrences of each event type (0, 1, 2) per unique observed time.\n\n\nadd_events_at_times_column\n\n\n\nadd_at_risk_column\nAdd a column to the DataFrame that counts the number of individuals at risk at each time point.\n\n\nadd_cause_specific_hazards_columns\nAdd columns for cause-specific hazards and conditional survival at each time point.\n\n\nadd_overall_survival_column\nAdd a column for overall survival, defined as the cumulative product of\n\n\n\n\n\naj.aalen_johansen(times, reals, event_of_interest=1, competing_events=None)\nCompute the Aalen-Johansen estimator for cumulative incidence in the presence of competing risks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntimes\npl.Series\nEvent or censoring times for each observation.\nrequired\n\n\nreals\npl.Series\nEvent type for each observation (0 for censored, event codes otherwise).\nrequired\n\n\nevent_of_interest\nint\nThe event code for the event of interest (default is 1).\n1\n\n\ncompeting_events\nlist of int\nList of event codes considered as competing events. If None, defaults to [2].\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nDataFrame with columns: - ‘time’: unique event times - ‘cuminc’: cumulative incidence estimate at each time\n\n\n\n\n\n\nThis implementation assumes that event codes are integers, with 0 indicating censoring.\n\n\n\n\naj.group_reals_by_times(df)\nCount occurrences of each event type (0, 1, 2) per unique observed time.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\npl.DataFrame\nA Polars DataFrame with at least two columns: - ‘times’ (int): The observed time for each record. - ‘reals’ (int): The event type for each record, where: - 0 indicates censoring, - 1 indicates the primary event, - 2 indicates a competing event.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nA DataFrame with one row per unique time and three additional columns: - ‘count_0’: Number of censored observations at that time. - ‘count_1’: Number of primary events at that time. - ‘count_2’: Number of competing events at that time.\n\n\n\n\n\n\n\nInput is assumed to be clean (i.e., times and reals are properly typed).\nTimes are sorted in ascending order in the output.\nIf a particular event type does not occur at a time, its count will be 0.\n\n\n\n\n\naj.add_events_at_times_column(sorted_times_and_reals)\n\n\n\naj.add_at_risk_column(events_data)\nAdd a column to the DataFrame that counts the number of individuals at risk at each time point.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevents_data\npl.DataFrame\nA DataFrame with columns ‘times’, ‘count_0’, ‘count_1’, and ‘count_2’.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe input DataFrame with an additional column ‘at_risk’ that contains the number of individuals at risk at each time point.\n\n\n\n\n\n\n\naj.add_cause_specific_hazards_columns(events_data)\nAdd columns for cause-specific hazards and conditional survival at each time point.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevents_data\npl.DataFrame\nA DataFrame with columns: - ‘count_0’: number of censored individuals at each time point, - ‘count_1’: number of primary events at each time point, - ‘count_2’: number of competing events at each time point, - ‘at_risk’: number of individuals at risk at each time point.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe input DataFrame with three additional columns: - ‘csh_1’: cause-specific hazard for event type 1 (count_1 / at_risk) - ‘csh_2’: cause-specific hazard for event type 2 (count_2 / at_risk) - ‘conditional_survival’: probability of not having any event at that time (count_0 / at_risk)\n\n\n\n\n\n\n\naj.add_overall_survival_column(events_data)\nAdd a column for overall survival, defined as the cumulative product of the conditional survival probabilities up to and including each time point.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nevents_data\npl.DataFrame\nA Polars DataFrame with a column ‘conditional_survival’ representing the probability of surviving past each time point.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npl.DataFrame\nThe input DataFrame with an additional column ‘overall_survival’, which contains the Kaplan-Meier-style survival probability at each time.",
    "crumbs": [
      "Reference",
      "Some functions",
      "aj"
    ]
  }
]